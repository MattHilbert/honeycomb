<!--#include virtual="/docs/includes/head/head-start.htm" -->
	<title>Honeycomb - Working practices - JavaScript</title>
    <meta name="description" content="Front-end Web Development and Design Guidelines for redgate.com.">
<!--#include virtual="/docs/includes/head/head-end.htm" -->



<body class="" id="top-of-page">

	<div class="page-wrapper">

		<div class="band">
		    <div class="band__inner-container--tight">

		        <h1>JavaScript</h1>

				<p>Javascript sits on top of the HTML and CSS foundation and enhances the user experience &amp; behaviour of the page, that's it.</p>

				<h2>What is JavaScript good for?</h2>
				<ul>
					<li>User interaction</li>
					<li>User experience</li>
					<li>Dynamic behaviour</li>
					<li>Animation</li>
					<li>Make pages easier to use</li>
					<li>Aid accessibility e.g. add keyboard support</li>
					<li>Shims - Adding support to browsers for features they don't natively support</li>
				</ul>

				<h2>Progressive enhancement</h2>
				<p>It's an important concept, it means making a page work without a feature that may or may not be supported across all environments.</p>
				<p>If a feature is supported the user gets the benefit, if not it still works. It means that if something breaks, the page can continue to work without the enhancement.</p>
				<p>We don't write any JavaScript that is required for the page to display the information needed by the visitor. Don't rely on JavaScript!</p>

				<h2>Frameworks</h2>
				<p>We use the popular <a href="http://jquery.com/">jQuery</a> JavaScript framework.</p>
				<p><i>Please do not add any other JavaScript frameworks into the mix. jQuery offers lots of functionality as well as having a vast library of plugins, so you shouldn't need to anyway!</i></p>

				<h2>Coding standards</h2>
				<h3>Style guide</h3>
				<p>Airbnb have written up <a href="https://github.com/airbnb/javascript" target="_blank">an excellent JavaScript style guide</a>, and published it on GitHub.</p>
				<p>Please read it and follow their reasonable approach to writing JavaScript.</p>

				<h3>Modular</h3>
				<p>Keep components and modular functionality in separate JavaScript files. E.g. <code>honeycomb.back-to-top.js</code> and <code>honeycomb.reveal.js</code>.</p>
				<p>We have a Grunt task that will concatenate and minify JavaScripts into 1 production ready file.</p>

				<h3>Clean and clear</h3>
				<p>When writing JavaScript, keep the global scope clear. That ensures that the JavaScript doesn't interfere with any other libraries or plugins that may be included on the page.</p>
				<p>To do this, use a global project namespace to keep all the methods and properties in. With the base Honeycomb components we use the 'Honeycomb' module/namespace.</p>
				<p>Use a self-executing anonymous function (SEAF), returning an object, to give your JavaScript scope and keep private properties/functions private. See the below example: <p><i>Notice that we use a capital letter for the namespaced component 'Example'.</i></p>

				<pre class="border padded rounded">// Check to see if the Honeycomb global object already exists. If not, create a blank object.
				var Honeycomb = Honeycomb || {};

				// Create our new namespaced code "Example".
				Honeycomb.Example = (function(){

					&nbsp;&nbsp;&nbsp;&nbsp;// Declare a private property (note the underscore to denote private).
					&nbsp;&nbsp;&nbsp;&nbsp;var _name = "This is a private property";

					&nbsp;&nbsp;&nbsp;&nbsp;// Declare a named function, for getting the name property.
					&nbsp;&nbsp;&nbsp;&nbsp;var getName = function getName() {
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return _name;
					&nbsp;&nbsp;&nbsp;&nbsp;};

					&nbsp;&nbsp;&nbsp;&nbsp;// Return an object with public properties and methods.
					&nbsp;&nbsp;&nbsp;&nbsp;return {
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getName: getName
					&nbsp;&nbsp;&nbsp;&nbsp;};
				})();
				</pre>

				<p>This ensures that the "_name" property stays private, as we haven't made it available, via the returned object, to the global scope.</p>
				<p>To call the getName method, just use:</p>
				<pre><code>Honeycomb.Example.getName();</pre></code>

				<h3>Hooking up to the DOM</h3>
				<p>Keep the JavaScript layer separate from the presentation layer by hooking your JavaScript up to elements with classes prefixed with 'js-'.</p>
				<p>This makes component production much simpler, as functionality and presentation can be mixed across components. It also makes it easier to read the document source code and understand what JavaScript functionality is being used. For example, sticky elements and components have a class name of 'js-sticky'.</p>

				<h3>Cache in</h3>
				<p>Ensure that variables are cached. This is especially important when using jQuery objects, as each time a new jQuery object is created it's time and resource consuming.</p>
				<pre class="border padded rounded">// Cache the jQuery object.
					var $myElement = $('.my-Element');

					// Do something with the cached element.
					var myAttr = $myElement.attr('data-my-attr');

					// Do something else with the cached element.
					var anotherAttr = $myElement.attr('data-another-attr');
				</pre>

				<h2>Debugging</h2>
				<p>If your page isn't acting the way you're expecting it to, and you think it could be down to JavaScript then the best place to start debugging JavaScript is the JavaScript console. This will inform you of any JavaScript errors or warnings that are happening because of the JavaScript.</p>

				<ul>
					<li>In Google Chrome: View > Developer > JavaScript Console</li>
					<li>In Mozilla Firefox: Tools > Web Developer > Error Console</li>
					<li>In Microsoft Internet Explorer: Tools > Developer Tools > Console</li>
				</ul>

				<p>Ideally, there should not be any errors, or warnings, being logged to the console. You'll probably find that if you fix all the errors that are being logged to the console, that your web page will act as you're expecting it to.</p>

				<h2>Code linting</h2>
				<p>We use JSHint to check our code for any potential bugs. This is set up as part of the Grunt task and will happen automatically whenever any of your JavaScript is modified.</p>

				<h2>Best practices:</h2>
				<ul>
					<li>Read and follow the style guide</li>
					<li>Separate functionality into small scripts</li>
					<li>Keep global scope clean, put code into namespaces</li>
					<li>Keep components as independent as possible</li>
					<li>Keep an eye on the console for any errors or warnings</li>
					<li>Test performance in all browsers mentioned in the <a href="/about-the-team/what-browsers-and-devices-do-we-support/">Browser Support Chart</a></li>
				</ul>
		    </div>
    	</div>

	</div><!-- END .page-wrapper -->




	<!--#include virtual="/docs/includes/footer/footer.htm" -->
