---
title: "Performance"
section: "webtoolkit"
subsection: "working-practices"
---

<div class="grid">

	<div class="grid__col grid__col--span-3-of-12 padded-right">
		{% include toolkit/working-practices-nav.htm %}
	</div>

	<div class="grid__col grid__col--span-9-of-12">

		        <h1>Performance</h1>
				<h2>YUI best practice</h2>

                <p>The YUI (Yahoo User Interface) team has done as much research into front-end performance as anyone.</p>
                
                <p>Here&#8217;s a cut down version of the YUI best practices for performance, reading the full article is highly recommended though: <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a></p>
                
                <p>Follow <a href="http://twitter.com/souders/">@souders</a> if you&#8217;re interested in web performance.</p>
                
                <h2>Minimise HTTP Requests</h2>
                <p>Combine all scripts and stylesheets &amp; use image sprites to reduce the number of round trips to the server.</p>
                
                <h2>Use a Content Delivery Network</h2>
                <p>We should move all referenced files css, js, images etc. to dispersed servers like Akamai.</p>
                
                <p><i>Caveat: We need to be careful here, as depending on the amount of resources requested, it may be detrimental. Every time a request is made from a new location (e.g a new CDN) a DNS check is done. These DNS checks can be time consuming and can prevent the resource from being loaded quicker than if it&#8217;s just hosted at the same location as the website.</i></p>
                
                <h2>Put Stylesheets at the Top</h2>
                <p>Putting stylesheets in the &lt;head&gt; allows the page to render progressively.</p>
                
                <h2>Put Scripts at the Bottom</h2>
                <p>&lt;script&gt;  tags block parallel downloads, put them last so other resources (such as HTML, CSS and images) can be downloaded first, giving the impression that the web page has loaded quicker than it actually has.</p>
                
                <h2>Avoid Expressions</h2>
                <p>Expressions are a way of running javascript as part of a CSS rule in IE 6-7. They can be used to fix support for non-supported features &#8211; like fixed positioning. The problem is they are constantly evaluated which can really slow down the page.</p>
                
                <pre><code>.ie6 .fixed {
                  top: expression(0+((e=document.documentElement.scrollTop)?e:document.body.scrollTop)+'px');
                }</code></pre>
                
                <h2>Make JavaScript and CSS External</h2>
                <p>The Cache is our friend. The only exception would be pages with one view per session which may benefit from inline script.</p>
                
                <h2>Minify JavaScript and CSS</h2>
                <p>We should use a minifier like JSMin, YUI Compressor or Closure Compiler to automatically minify our code and reduce the file size of our CSS &amp; js.</p>
                
                <p>Removing variables from the global scope can get better results from compression as the names can be shortened as they can&#8217;t be accessed outside of their enclosing functions.</p>
                
                <pre><code>var canIBeShortened = 'no';
                (function() {
                	var willMyReallyLongVariableBeShortnedByTheMinifier = 'yes';
                	alert(willMyReallyLongVariableBeShortnedByTheMinifier);
                })();</code></pre>
                
                <pre><code>// Minified
                var i="no"(function(){alert("yes")})()</code></pre>
                
                <h2>Gzip text assets</h2>
                <p>Gzip, like any compression algorithm, takes any text based source and compresses it based on repeated/repeatable strings. Most code compresses really well via gzip as thereâ€™s a tendency for all code to have repeated strings in; e.g. background-image over and over in CSS, over and over in markup&#8230;</p>
                
                <p>Gzip really squishes the size of your assets massively, and you should definitely enable it. For a decent .htaccess snippet, check out how the <a href="https://github.com/h5bp/html5-boilerplate/blob/dac15682b35ad69f519205e1b82694d0cab189ca/.htaccess#L153">HTML5 Boilerplate handles stuff</a>.</p>
                
                <h2>Avoid Redirects</h2>
                <p>They slow down the user experience. Imagine going from A to B to C before getting to D!</p>
                
                <h2>Reduce the Number of DOM Elements</h2>
                <p>Smaller pages with fewer elements are faster to traverse and modify.</p>
                
                <h2>Minimise the Number of iframes</h2>
                <p>Costly even if blank because they are new windows, they also block the page&#8217;s onload event.</p>
                
                <h2>No 404s</h2>
                <p>Look through monitoring and remove these unnecessary trips to the server.</p>
                
                <h2>Reduce Cookie Size</h2>
                <p>Transferred in the page headers, remove unnecessary cookies, keep small and set an Expires date.</p>
                
                <h2>Minimise DOM Access</h2>
                <p>Save references to elements in variables to prevent lookups, innerHTML is generally faster than DOM. Also, avoid fixing layout with javascript (Think progressive enhancement as well as performance).</p>
                
                <h2>Develop Smart Event Handlers</h2>
                <p>Minimise the amount of event listeners in a page with Event Delegation.</p>
                
                <p>jQuery&#8217;s &#8220;on&#8221; function registers an event listener on an element once to handle all the occurrences of that event in its&#8217; child elements. e.g.</p>
                
                <pre><code>&lt;p&gt;
                    &lt;a href="#"&gt;
                      &lt;span&gt;linky&lt;/span&gt;
                    &lt;/a&gt;
                    &lt;a href="#"&gt;
                      &lt;span&gt;linky 2&lt;/span&gt;&gt;
                    &lt;/a&gt;</pre></code>
                
                <p>When a &lt;span&gt; element is clicked the event moves up through the tree, all the way to the body where the event handler can find which <span> element fired it.</p>
                
                <p>If you have 100 elements in the page you want respond to click events, Event delegation will save you.</p>
                
                <p>Learn: <a href="http://api.jquery.com/on/">http://api.jquery.com/on/</a></p>
                
                <h2>Avoid IE Filters in CSS</h2>
                <p>Filters are "special features" in CSS for IE, they can slow down the page though, so use sparingly.</p>
                
                <h2>Optimize Images</h2>
                <p>Batch operations like the YUI image compressor, ImageOptim or sprite generators should be used to make the images as small as possible whilst keeping their quality.</p>
                
                <h2>Keep Components under 25K</h2>
                <p>The iPhone won't cache anything bigger than 25K uncompressed.</p>
                
                <h2>More reading</h2>
                <p>More reading about front-end performance can be found at <a href="http://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/">http://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/</a></p>

		    </div>
    	</div>

	

    

	
	

	
